import android.Manifest
import android.annotation.SuppressLint
import android.content.Context
import android.content.pm.PackageManager
import android.location.Location
import android.location.LocationListener
import android.location.LocationManager
import android.os.Bundle
import android.os.Looper
import androidx.core.app.ActivityCompat
import androidx.core.app.ComponentActivity

class LocationHelper(private val context: Context) : LocationListener {

    private var locationManager: LocationManager? = null

    init {
        locationManager = context.getSystemService(Context.LOCATION_SERVICE) as LocationManager
    }

    fun requestLocationPermissions(@SuppressLint("RestrictedApi") activity: ComponentActivity) {
        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(activity, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), 1)
        } else {
            startLocationUpdates()
        }
    }

    private fun startLocationUpdates() {
        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
            locationManager?.requestLocationUpdates(LocationManager.GPS_PROVIDER, 5000, 10f, this, Looper.getMainLooper())
            locationManager?.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 5000, 10f, this, Looper.getMainLooper())
        }
    }

    override fun onLocationChanged(location: Location) {
        // 当位置更新时调用
        val latitude = location.latitude
        val longitude = location.longitude
        println("log__ggLatitude: $latitude, Longitude: $longitude")
    }

    override fun onStatusChanged(provider: String?, status: Int, extras: Bundle?) {
        // 位置提供者状态变化时调用
    }

    override fun onProviderEnabled(provider: String) {
        // 位置提供者启用时调用
    }

    override fun onProviderDisabled(provider: String) {
        // 位置提供者禁用时调用
    }
}